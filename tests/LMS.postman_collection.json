{
  "info": {
    "name": "Library Management System",
    "description": "Complete API testing collection for Library Management System with security tests and validation scenarios",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "readerToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "staffId",
      "value": "",
      "type": "string"
    },
    {
      "key": "authorId",
      "value": "",
      "type": "string"
    },
    {
      "key": "publisherId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookId",
      "value": "",
      "type": "string"
    },
    {
      "key": "readerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "loanId",
      "value": "",
      "type": "string"
    },
    {
      "key": "fineId",
      "value": "",
      "type": "string"
    },
    {
      "key": "secondReaderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "staffMemberId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "‚úÖ Login Admin Staff",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.token).to.exist;",
                  "    pm.collectionVariables.set('adminToken', response.token);",
                  "    ",
                  "    if (response.data && response.data._id) {",
                  "        pm.collectionVariables.set('staffId', response.data._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response).to.have.property('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin1@hotmail.com\",\n  \"password\": \"Admin@1234\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login/staff",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login", "staff"]
            }
          }
        },
        {
          "name": "‚úÖ Sign Up Reader",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has token and reader data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.token).to.exist;",
                  "    pm.expect(response.data).to.exist;",
                  "    pm.collectionVariables.set('readerToken', response.token);",
                  "    pm.collectionVariables.set('readerId', response.data._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reader_fname\": \"John\",\n  \"reader_lname\": \"Doe\",\n  \"reader_email\": \"john.doe@example.com\",\n  \"reader_phone_no\": \"+1234567890\",\n  \"reader_address\": \"123 Main St, City, Country\",\n  \"password\": \"Reader@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup/reader",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup", "reader"]
            }
          }
        },
        {
          "name": "‚úÖ Login Reader",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.token).to.exist;",
                  "    pm.collectionVariables.set('readerToken', response.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"Reader@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login/reader",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login", "reader"]
            }
          }
        },
        {
          "name": "üö´ Invalid Login Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 or 400', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 400]);",
                  "});",
                  "",
                  "pm.test('Error message exists', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});",
                  "",
                  "pm.test('No token in response', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.token).to.not.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login/staff",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login", "staff"]
            }
          }
        },
        {
          "name": "üö´ Duplicate Reader Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates conflict', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 409, 500]);",
                  "});",
                  "",
                  "pm.test('Error message about duplicate email', function () {",
                  "    const response = pm.response.json();",
                  "    const errorMsg = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(errorMsg).to.include('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reader_fname\": \"John\",\n  \"reader_lname\": \"Doe\",\n  \"reader_email\": \"john.doe@example.com\",\n  \"reader_phone_no\": \"+9876543210987\",\n  \"reader_address\": \"456 Different St, City, Country\",\n  \"password\": \"Reader@456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup/reader",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup", "reader"]
            }
          }
        }
      ]
    },
    {
      "name": "üìö Authors",
      "item": [
        {
          "name": "‚úÖ Create Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Author created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.author).to.exist;",
                  "    pm.expect(response.data.author._id).to.exist;",
                  "    pm.collectionVariables.set('authorId', response.data.author._id);",
                  "});",
                  "",
                  "pm.test('Author has correct data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.author.author_name).to.eql('J.K. Rowling');",
                  "    pm.expect(response.data.author.email).to.eql('jk.rowling@example.com');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"author_name\": \"J.K. Rowling\",\n  \"email\": \"jk.rowling@example.com\",\n  \"biography\": \"British author, best known for the Harry Potter series.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            }
          }
        },
        {
          "name": "‚úÖ Get All Authors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains authors', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors",
              "host": ["{{baseUrl}}"],
              "path": ["authors"]
            }
          }
        },
        {
          "name": "‚úÖ Get Author by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Author data is returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.author).to.exist;",
                  "    pm.expect(response.data.author.author_name).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors/{{authorId}}",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{authorId}}"]
            }
          }
        },
        {
          "name": "‚úÖ Update Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Author updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.author).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"biography\": \"Updated biography: British author, best known for the Harry Potter series and other works.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/authors/{{authorId}}",
              "host": ["{{baseUrl}}"],
              "path": ["authors", "{{authorId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Publishers",
      "item": [
        {
          "name": "‚úÖ Create Publisher",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Publisher created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.publisher).to.exist;",
                  "    pm.expect(response.data.publisher._id).to.exist;",
                  "    pm.collectionVariables.set('publisherId', response.data.publisher._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"publisher_name\": \"Bloomsbury Publishing\",\n  \"publisher_website\": \"https://www.bloomsbury.com\",\n  \"year_of_publication\": 1986,\n  \"no_published_books\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/publishers",
              "host": ["{{baseUrl}}"],
              "path": ["publishers"]
            }
          }
        },
        {
          "name": "‚úÖ Get All Publishers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains publishers', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/publishers",
              "host": ["{{baseUrl}}"],
              "path": ["publishers"]
            }
          }
        },
        {
          "name": "‚úÖ Get Publisher by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Publisher data is returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.publisher).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/publishers/{{publisherId}}",
              "host": ["{{baseUrl}}"],
              "path": ["publishers", "{{publisherId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üìñ Books",
      "item": [
        {
          "name": "‚úÖ Create Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Book created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.book).to.exist;",
                  "    pm.expect(response.data.book._id).to.exist;",
                  "    pm.collectionVariables.set('bookId', response.data.book._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_title\": \"Harry Potter and the Philosopher's Stone\",\n  \"book_description\": \"The first book in the Harry Potter series\",\n  \"book_pages\": 223,\n  \"release_date\": \"1997-06-26\",\n  \"book_tags\": [\"fantasy\", \"young adult\", \"magic\"],\n  \"book_ISBN\": \"978-0747532743\",\n  \"book_status\": \"available\",\n  \"authorId\": \"{{authorId}}\",\n  \"publisherId\": \"{{publisherId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "‚úÖ Get All Books",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains books', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results || response.data).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "‚úÖ Get Book by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Book data is returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.book).to.exist;",
                  "    pm.expect(response.data.book.book_title).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            }
          }
        },
        {
          "name": "üö´ Invalid Book Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message about missing fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_title\": \"\",\n  \"book_description\": \"A book with missing required fields\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        },
        {
          "name": "‚úÖ Update Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Book updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.book).to.exist;",
                  "    pm.expect(response.data.book.book_title).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_title\": \"Harry Potter and the Philosopher's Stone (Updated Edition)\",\n  \"book_description\": \"The first book in the Harry Potter series - Updated description\",\n  \"book_pages\": 250\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}"]
            }
          }
        },
        {
          "name": "‚úÖ Update Book Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Book status updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.book).to.exist;",
                  "    pm.expect(response.data.book.book_status).to.equal('available');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_status\": \"available\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "status"]
            }
          }
        },
        {
          "name": "üö´ Invalid Book Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message about invalid status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_status\": \"invalid_status\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books/{{bookId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["books", "{{bookId}}", "status"]
            }
          }
        },
        {
          "name": "üö´ Invalid ISBN Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 500', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});",
                  "",
                  "pm.test('Error message about invalid ISBN', function () {",
                  "    const response = pm.response.json();",
                  "    const errorMsg = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(errorMsg).to.include('isbn');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_title\": \"Test Book with Invalid ISBN\",\n  \"book_description\": \"Testing ISBN validation\",\n  \"book_pages\": 100,\n  \"release_date\": \"2023-01-01\",\n  \"book_ISBN\": \"invalid-isbn\",\n  \"book_status\": \"available\",\n  \"authorId\": \"{{authorId}}\",\n  \"publisherId\": \"{{publisherId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/books",
              "host": ["{{baseUrl}}"],
              "path": ["books"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• Readers",
      "item": [
        {
          "name": "‚úÖ Get All Readers (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains readers', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/readers",
              "host": ["{{baseUrl}}"],
              "path": ["readers"]
            }
          }
        },
        {
          "name": "‚úÖ Get My Profile (Reader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reader profile returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.reader || response.data).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{readerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/readers/getMe",
              "host": ["{{baseUrl}}"],
              "path": ["readers", "getMe"]
            }
          }
        },
        {
          "name": "‚úÖ Update My Profile (Reader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reader profile updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('updated successfully');",
                  "    pm.expect(response.data).to.exist;",
                  "    pm.expect(response.data.reader_fname).to.equal('John Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{readerToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reader_fname\": \"John Updated\",\n  \"reader_lname\": \"Doe Updated\",\n  \"reader_phone_no\": \"+1234567899\",\n  \"reader_address\": \"456 Updated St, New City, Country\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/readers/updateMe",
              "host": ["{{baseUrl}}"],
              "path": ["readers", "updateMe"]
            }
          }
        },
        {
          "name": "‚úÖ Update My Password (Reader)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Password updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Password updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{readerToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"passwordCurrent\": \"Reader@123\",\n  \"password\": \"NewReaderPassword@123\",\n  \"passwordConfirm\": \"NewReaderPassword@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/readers/updateMyPassword",
              "host": ["{{baseUrl}}"],
              "path": ["readers", "updateMyPassword"]
            }
          }
        }
      ]
    },
    {
      "name": "üìã Loans",
      "item": [
        {
          "name": "‚úÖ Create Loan",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Loan created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.loan).to.exist;",
                  "    pm.expect(response.data.loan._id).to.exist;",
                  "    pm.collectionVariables.set('loanId', response.data.loan._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookId\": \"{{bookId}}\",\n  \"readerId\": \"{{readerId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "‚úÖ Get All Loans",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains loans', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "‚úÖ Get Overdue Loans",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains overdue loans data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/loans/overdue",
              "host": ["{{baseUrl}}"],
              "path": ["loans", "overdue"]
            }
          }
        },
        {
          "name": "üö´ Test Book Unavailability After Loan",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 409', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
                  "});",
                  "",
                  "pm.test('Error message about book already loaned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "    const errorMsg = JSON.stringify(response).toLowerCase();",
                  "    pm.expect(errorMsg).to.include('book');",
                  "    pm.expect(errorMsg).to.satisfy(function(msg) {",
                  "        return msg.includes('loan') || msg.includes('unavailable') || msg.includes('available');",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookId\": \"{{bookId}}\",\n  \"readerId\": \"{{readerId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "‚úÖ Return Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Book returned successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.message).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/loans/{{loanId}}/return",
              "host": ["{{baseUrl}}"],
              "path": ["loans", "{{loanId}}", "return"]
            }
          }
        }
      ]
    },
    {
      "name": "üí∞ Fines",
      "item": [
        {
          "name": "‚úÖ Get All Fines",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains fines', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/fines",
              "host": ["{{baseUrl}}"],
              "path": ["fines"]
            }
          }
        },
        {
          "name": "‚úÖ Create Fines for Overdue",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Overdue fines processed', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.message).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/fines/create-overdue",
              "host": ["{{baseUrl}}"],
              "path": ["fines", "create-overdue"]
            }
          }
        },
        {
          "name": "‚úÖ Create Manual Fine",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Fine created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.fine || response.data).to.exist;",
                  "    const fineId = response.data.fine?._id || response.data._id;",
                  "    if (fineId) {",
                  "        pm.collectionVariables.set('fineId', fineId);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"loanId\": \"{{loanId}}\",\n  \"accumulated_amount\": 5.0,\n  \"penalty_rate\": 1.0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/fines",
              "host": ["{{baseUrl}}"],
              "path": ["fines"]
            }
          }
        },
        {
          "name": "‚úÖ Pay Fine",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Fine payment processed', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.message).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/fines/{{fineId}}/pay",
              "host": ["{{baseUrl}}"],
              "path": ["fines", "{{fineId}}", "pay"]
            }
          }
        }
      ]
    },
    {
      "name": "üë®‚Äçüíº Staff Management",
      "item": [
        {
          "name": "‚úÖ Get All Staff (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains staff', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data || response.results).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/staff",
              "host": ["{{baseUrl}}"],
              "path": ["staff"]
            }
          }
        },
        {
          "name": "‚úÖ Create New Staff (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Staff member created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.staff || response.data).to.exist;",
                  "    const staffId = response.data.staff?._id || response.data._id;",
                  "    if (staffId) {",
                  "        pm.collectionVariables.set('staffMemberId', staffId);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"staff_fname\": \"Alice\",\n  \"staff_lname\": \"Johnson\",\n  \"staff_email\": \"alice.johnson@library.com\",\n  \"password\": \"Staff@789\",\n  \"role\": \"librarian\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/staff",
              "host": ["{{baseUrl}}"],
              "path": ["staff"]
            }
          }
        },
        {
          "name": "‚úÖ Get My Profile (Staff)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Staff profile returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.staff || response.data).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/staff/getMe",
              "host": ["{{baseUrl}}"],
              "path": ["staff", "getMe"]
            }
          }
        },
        {
          "name": "‚úÖ Update My Profile (Staff)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Staff profile updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('updated successfully');",
                  "    pm.expect(response.data).to.exist;",
                  "    pm.expect(response.data.staff_fname).to.equal('Admin Updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"staff_fname\": \"Admin Updated\",\n  \"staff_lname\": \"User Updated\",\n  \"staff_email\": \"admin.updated@library.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/staff/updateMe",
              "host": ["{{baseUrl}}"],
              "path": ["staff", "updateMe"]
            }
          }
        },
        {
          "name": "‚úÖ Update My Password (Staff)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Password updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Password updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"passwordCurrent\": \"Admin@1234\",\n  \"password\": \"NewAdminPassword@1234\",\n  \"passwordConfirm\": \"NewAdminPassword@1234\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/staff/updateMyPassword",
              "host": ["{{baseUrl}}"],
              "path": ["staff", "updateMyPassword"]
            }
          }
        }
      ]
    },
    {
      "name": "ÔøΩ API Filtering & Pagination",
      "item": [
        {
          "name": "‚úÖ Author Name Filtering",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has authors data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('authors');",
                  "});",
                  "",
                  "pm.test('Authors contain filtered name', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.authors.length > 0) {",
                  "        jsonData.data.authors.forEach(function(author) {",
                  "            pm.expect(author.author_name).to.include('J.K. Rowling');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors?author_name=J.K. Rowling",
              "host": ["{{baseUrl}}"],
              "path": ["authors"],
              "query": [
                {
                  "key": "author_name",
                  "value": "J.K. Rowling"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Book Pages Filtering (MongoDB Operator)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Books have minimum page count', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.books.length > 0) {",
                  "        jsonData.data.books.forEach(function(book) {",
                  "            pm.expect(book.book_pages).to.be.at.least(200);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?book_pages[gte]=200",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "book_pages[gte]",
                  "value": "200"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Author Sorting (Ascending)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Authors are sorted by name', function () {",
                  "    var jsonData = pm.response.json();",
                  "    var authors = jsonData.data.authors;",
                  "    if (authors.length > 1) {",
                  "        for (let i = 0; i < authors.length - 1; i++) {",
                  "            pm.expect(authors[i].author_name).to.be.at.most(authors[i + 1].author_name);",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors?sort=author_name",
              "host": ["{{baseUrl}}"],
              "path": ["authors"],
              "query": [
                {
                  "key": "sort",
                  "value": "author_name"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Book Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination limits results', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.books.length).to.be.at.most(2);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?page=1&limit=2",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "2"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Book Field Selection",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Only selected fields returned', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.books.length > 0) {",
                  "        var book = jsonData.data.books[0];",
                  "        pm.expect(book).to.have.property('book_title');",
                  "        pm.expect(book).to.have.property('book_pages');",
                  "        // Note: _id and populated fields may still be present",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?fields=book_title,book_pages",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "fields",
                  "value": "book_title,book_pages"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Loan Status Filtering",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All loans have correct status', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data.loans.length > 0) {",
                  "        jsonData.data.loans.forEach(function(loan) {",
                  "            pm.expect(loan.status).to.equal('active');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/loans?status=active",
              "host": ["{{baseUrl}}"],
              "path": ["loans"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Combined Filtering",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Complex filtering works', function () {",
                  "    var jsonData = pm.response.json();",
                  "    var books = jsonData.data.books;",
                  "    ",
                  "    // Check pagination",
                  "    pm.expect(books.length).to.be.at.most(2);",
                  "    ",
                  "    // Check filtering",
                  "    if (books.length > 0) {",
                  "        books.forEach(function(book) {",
                  "            pm.expect(book.book_pages).to.be.at.least(100);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/books?book_pages[gte]=100&sort=book_title&page=1&limit=2",
              "host": ["{{baseUrl}}"],
              "path": ["books"],
              "query": [
                {
                  "key": "book_pages[gte]",
                  "value": "100"
                },
                {
                  "key": "sort",
                  "value": "book_title"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "2"
                }
              ]
            }
          }
        },
        {
          "name": "‚úÖ Empty Filter Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Empty results handled correctly', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.authors).to.be.an('array');",
                  "    pm.expect(jsonData.data.authors.length).to.equal(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/authors?author_name=NonexistentAuthor123",
              "host": ["{{baseUrl}}"],
              "path": ["authors"],
              "query": [
                {
                  "key": "author_name",
                  "value": "NonexistentAuthor123"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "ÔøΩüö´ Security & Validation Tests",
      "item": [
        {
          "name": "üö´ Unauthorized Access to Loans",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Unauthorized access properly blocked', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "üö´ Reader Token on Admin Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates forbidden or unauthorized', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
                  "});",
                  "",
                  "pm.test('Reader access to admin route blocked', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{readerToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/staff",
              "host": ["{{baseUrl}}"],
              "path": ["staff"]
            }
          }
        },
        {
          "name": "üö´ Invalid Token Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Invalid token properly rejected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "üö´ Create Loan with Non-existent Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates error', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                  "});",
                  "",
                  "pm.test('Error message about invalid book', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookId\": \"507f1f77bcf86cd799439011\",\n  \"readerId\": \"{{readerId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "üö´ Create Loan with Non-existent Reader",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates error', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                  "});",
                  "",
                  "pm.test('Error message about invalid reader', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookId\": \"{{bookId}}\",\n  \"readerId\": \"507f1f77bcf86cd799439012\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/loans",
              "host": ["{{baseUrl}}"],
              "path": ["loans"]
            }
          }
        },
        {
          "name": "üö´ Return Non-existent Loan",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates error', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                  "});",
                  "",
                  "pm.test('Error message about invalid loan', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message || response.error).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/loans/507f1f77bcf86cd799439013/return",
              "host": ["{{baseUrl}}"],
              "path": ["loans", "507f1f77bcf86cd799439013", "return"]
            }
          }
        },
        {
          "name": "üö´ Password Update Via Profile Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Password update blocked', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('not for password updates');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"staff_fname\": \"Test\",\n  \"password\": \"NewPassword@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/staff/updateMe",
              "host": ["{{baseUrl}}"],
              "path": ["staff", "updateMe"]
            }
          }
        },
        {
          "name": "üö´ Wrong Current Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Wrong password rejected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('current password is incorrect');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"passwordCurrent\": \"WrongPassword123\",\n  \"password\": \"NewPassword@123\",\n  \"passwordConfirm\": \"NewPassword@123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/staff/updateMyPassword",
              "host": ["{{baseUrl}}"],
              "path": ["staff", "updateMyPassword"]
            }
          }
        },
        {
          "name": "üö´ Password Confirmation Mismatch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Password mismatch rejected', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('do not match');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"passwordCurrent\": \"NewAdminPassword@1234\",\n  \"password\": \"TESTING\",\n  \"passwordConfirm\": \"DIFFERENT_TESTING\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/staff/updateMyPassword",
              "host": ["{{baseUrl}}"],
              "path": ["staff", "updateMyPassword"]
            }
          }
        }
      ]
    }
  ]
}
